// app_state.h
// code generated by appStation (a state machine diagramming app)
// state machine vars and methods...

// State enumerated type declaration
typedef enum { buzz_state_flash_speed, buzz_state_inc_fSl, buzz_state_dec_fSl, buzz_state_inc_fSs, buzz_state_dec_fSs, buzz_state_inc_offset, buzz_state_dec_offset, buzz_state_large_fS, buzz_state_tweak_offset, buzz_state_small_fS, buzz_state_sample, buzz_state_start, buzz_state_f_stop, buzz_state_asa, buzz_state_speed, buzz_state_sleep, buzz_state_inc_asa, buzz_state_dec_asa, buzz_state_dec_speed, buzz_state_inc_speed } State;

// Signal enumerated type declaration
typedef enum { shutter_dn, speed_dn, sleep_time, times_up, rewind_dn, done } Signal;

// global state variable declaration
State state;

// setup pre-init state function
void setup_pre_init_state() { state = (State)-1; send_signal(buzz_state_start); }
// onTick processor function
void onTick_processor() {
  switch (state) {
  }
}

// onEnterState processor function
void onEnterState_processor(int sig, int sig_data) {
  switch (state) {
    case buzz_state_flash_speed :
      display_shutter_speed(); set_timer(1000);
    break;
    case buzz_state_inc_fSl :
      inc_large_fS();
    break;
    case buzz_state_dec_fSl :
      dec_large_fS();
    break;
    case buzz_state_inc_fSs :
      inc_small_fS();
    break;
    case buzz_state_dec_fSs :
      dec_small_fS();
    break;
    case buzz_state_inc_offset :
      inc_offset();
    break;
    case buzz_state_dec_offset :
      dec_offset();
    break;
    case buzz_state_large_fS :
      display_large_fS();
    break;
    case buzz_state_tweak_offset :
      display_offset();
    break;
    case buzz_state_small_fS :
      display_small_fS();
    break;
    case buzz_state_sample :
      sample_light();
    break;
    case buzz_state_start :
      welcome();
    break;
    case buzz_state_f_stop :
      disp_f_stop(); reset_sleep_timeout();
    break;
    case buzz_state_asa :
      display_asa(); start_config_timer();
    break;
    case buzz_state_speed :
      display_shutter_speed(); start_config_timer();
    break;
    case buzz_state_sleep :
      display_black(); slow_pulse();
    break;
    case buzz_state_inc_asa :
      increment_asa(); start_config_timer();
    break;
    case buzz_state_dec_asa :
      decrement_asa(); start_config_timer();
    break;
    case buzz_state_dec_speed :
      decrement_speed(); start_config_timer();
    break;
    case buzz_state_inc_speed :
      increment_speed(); start_config_timer();
    break;
  }
}

  // process the state transition
int state_trans_processor(int state, int sig, int sig_data) {
  switch (state) {
      case buzz_state_flash_speed :
        switch (sig) {
          case times_up :
            state = buzz_state_f_stop;
          break;
        }
      break;
      case buzz_state_inc_fSl :
        switch (sig) {
          case done :
            state = buzz_state_large_fS;
          break;
        }
      break;
      case buzz_state_dec_fSl :
        switch (sig) {
          case done :
            state = buzz_state_large_fS;
          break;
        }
      break;
      case buzz_state_inc_fSs :
        switch (sig) {
          case done :
            state = buzz_state_small_fS;
          break;
        }
      break;
      case buzz_state_dec_fSs :
        switch (sig) {
          case done :
            state = buzz_state_small_fS;
          break;
        }
      break;
      case buzz_state_inc_offset :
        switch (sig) {
          case done :
            state = buzz_state_tweak_offset;
          break;
        }
      break;
      case buzz_state_dec_offset :
        switch (sig) {
          case done :
            state = buzz_state_tweak_offset;
          break;
        }
      break;
      case buzz_state_large_fS :
        switch (sig) {
          case shutter_dn :
            state = buzz_state_sample;
          break;
          case speed_dn :
            state = buzz_state_dec_fSl;
          break;
          case rewind_dn :
            state = buzz_state_inc_fSl;
          break;
        }
      break;
      case buzz_state_tweak_offset :
        switch (sig) {
          case shutter_dn :
            state = buzz_state_sample;
          break;
          case rewind_dn :
            state = buzz_state_dec_offset;
          break;
          case speed_dn :
            state = buzz_state_inc_offset;
          break;
        }
      break;
      case buzz_state_small_fS :
        switch (sig) {
          case shutter_dn :
            state = buzz_state_large_fS;
          break;
          case speed_dn :
            state = buzz_state_dec_fSs;
          break;
          case rewind_dn :
            state = buzz_state_inc_fSs;
          break;
        }
      break;
      case buzz_state_sample :
        switch (sig) {
          case done :
            state = buzz_state_f_stop;
          break;
        }
      break;
      case buzz_state_start :
        switch (sig) {
          case shutter_dn :
            state = buzz_state_sample;
          break;
          case speed_dn :
            state = buzz_state_small_fS;
          break;
          case rewind_dn :
            state = buzz_state_asa;
          break;
        }
      break;
      case buzz_state_f_stop :
        switch (sig) {
          case speed_dn :
            state = buzz_state_speed;
          break;
          case sleep_time :
            state = buzz_state_sleep;
          break;
          case shutter_dn :
            state = buzz_state_sample;
          break;
          case rewind_dn :
            state = buzz_state_tweak_offset;
          break;
          case times_up :
            state = buzz_state_flash_speed;
          break;
        }
      break;
      case buzz_state_asa :
        switch (sig) {
          case rewind_dn :
            state = buzz_state_inc_asa;
          break;
          case speed_dn :
            state = buzz_state_dec_asa;
          break;
          case shutter_dn :
            state = buzz_state_sample;
          break;
        }
      break;
      case buzz_state_speed :
        switch (sig) {
          case times_up :
            state = buzz_state_f_stop;
          break;
          case shutter_dn :
            state = buzz_state_f_stop;
          break;
          case rewind_dn :
            state = buzz_state_dec_speed;
          break;
          case speed_dn :
            state = buzz_state_inc_speed;
          break;
        }
      break;
      case buzz_state_sleep :
        switch (sig) {
          case shutter_dn :
            state = buzz_state_f_stop;
          break;
        }
      break;
      case buzz_state_inc_asa :
        switch (sig) {
          case done :
            state = buzz_state_asa;
          break;
        }
      break;
      case buzz_state_dec_asa :
        switch (sig) {
          case done :
            state = buzz_state_asa;
          break;
        }
      break;
      case buzz_state_dec_speed :
        switch (sig) {
          case done :
            state = buzz_state_speed;
          break;
        }
      break;
      case buzz_state_inc_speed :
        switch (sig) {
          case done :
            state = buzz_state_speed;
          break;
        }
      break;
      default :
        state = buzz_state_start;
  }
  return state;
}

// debug State by name
#ifdef DEBUG_STATE || DEBUG_EVENTS
char *state_name(int state) {
  switch (state) {
   case buzz_state_flash_speed :  return "flash_speed";
   case buzz_state_inc_fSl :  return "inc_fSl";
   case buzz_state_dec_fSl :  return "dec_fSl";
   case buzz_state_inc_fSs :  return "inc_fSs";
   case buzz_state_dec_fSs :  return "dec_fSs";
   case buzz_state_inc_offset :  return "inc_offset";
   case buzz_state_dec_offset :  return "dec_offset";
   case buzz_state_large_fS :  return "large_fS";
   case buzz_state_tweak_offset :  return "tweak_offset";
   case buzz_state_small_fS :  return "small_fS";
   case buzz_state_sample :  return "sample";
   case buzz_state_start :  return "start";
   case buzz_state_f_stop :  return "f_stop";
   case buzz_state_asa :  return "asa";
   case buzz_state_speed :  return "speed";
   case buzz_state_sleep :  return "sleep";
   case buzz_state_inc_asa :  return "inc_asa";
   case buzz_state_dec_asa :  return "dec_asa";
   case buzz_state_dec_speed :  return "dec_speed";
   case buzz_state_inc_speed :  return "inc_speed";
  }
  return "un-named state";
}
#endif

// debug Signal by name
#ifdef DEBUG_STATE || DEBUG_EVENTS
char *signal_name(int signal) {
  switch (signal) {
   case shutter_dn :  return "shutter_dn";
   case speed_dn :  return "speed_dn";
   case sleep_time :  return "sleep_time";
   case times_up :  return "times_up";
   case rewind_dn :  return "rewind_dn";
   case done :  return "done";
  }
  return "un-named signal";
}
#endif


